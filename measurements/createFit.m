function [fitresult, gof] = createFit(InputFrequency_Hz_, OutputLevel_dB_)
%CREATEFIT(INPUTFREQUENCY_HZ_,OUTPUTLEVEL_DB_)
%  Create a fit.
%
%  Data for 'Estimated interpolation' fit:
%      X Input: Input frequency [Hz] from af1
%      Y Output: Output level [dB] from af1
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 20-Jul-2023 15:00:55


%% Fit: 'Estimated interpolation'.
[xData, yData] = prepareCurveData( InputFrequency_Hz_, OutputLevel_dB_ );

% Set up fittype and options.
ft = fittype( 'fourier7' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Algorithm = 'Levenberg-Marquardt';
opts.DiffMaxChange = 0.01;
opts.DiffMinChange = 1e-10;
opts.Display = 'Off';
opts.Normalize = 'on';
opts.StartPoint = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.30176002173264];

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'Estimated interpolation' );
h = plot( fitresult, xData, yData );
legend( h, 'Output level [dB] vs. Input frequency [Hz]', 'Estimated interpolation', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'Input frequency [Hz]', 'Interpreter', 'none' );
ylabel( 'Output level [dB]', 'Interpreter', 'none' );
grid on


